---
import FlowerIcon from '../../icons/FlowerIcon.astro'
import BlockQuote from '../BlockQuote.astro'
import Button from '../Button.astro'
import Markdown from '../Markdown.astro'

const {
	title,
	paragraph,
	linkLabel,
	linkTo,
	externalLinkLabel,
	externalLinkTo,
	imageSource,
	imageAlt,
	quotation,
	hasFlower = false,
	isTextOnRight = false,
	isButtonAlt = false,
	altColor = false,
	roundedImage = false,
} = Astro.props
const sectionClass = `splitted-section ${
	altColor ? 'splitted-section--alt-color' : ''
}`
const gridClass = `splitted-section__grid ${
	isTextOnRight ? 'splitted-section__grid--reverse' : ''
}`
const imageClass = `splitted-section__image ${
	roundedImage ? 'splitted-section__image--rounded' : ''
}`
---

<section class={sectionClass}>
	<div class={gridClass}>
		<div class='splitted-section__text'>
			<h2>{title}</h2>
			<!-- <p>{paragraph}</p> -->
			<div>
				<Markdown content={paragraph} />
			</div>
			<div class='splitted-section__buttons'>
				{
					linkLabel && isButtonAlt && (
						<Button alt name={linkLabel} link={linkTo} />
					)
				}
				{linkLabel && !isButtonAlt && <Button name={linkLabel} link={linkTo} />}
				{
					externalLinkLabel && isButtonAlt && (
						<Button alt name={externalLinkLabel} link={externalLinkTo} />
					)
				}
				{
					externalLinkLabel && !isButtonAlt && (
						<Button name={externalLinkLabel} externalLink={externalLinkTo} />
					)
				}
			</div>
			{quotation && <BlockQuote text={quotation} />}
		</div>
		<div class={imageClass}>
			{imageClass}
			<img src={imageSource} alt={imageAlt} />
		</div>
	</div>
	{hasFlower && <FlowerIcon class='splitted-section__flower' />}
</section>

<style lang='scss'>
	@import '../../styles/_vars.scss';

	@function max($numbers...) {
		@return m#{a}x(#{$numbers});
	}

	.splitted-section {
		background-color: $color-white;
		width: 100%;
		position: relative;
		&--alt-color {
			background-color: $color-main;
			padding: $gutter-large 0;
			margin-bottom: 0;
			.splitted-section__grid {
				box-shadow: $shadow-dark;
			}
			.splitted-section__text {
				padding: $gutter-large !important;
			}
		}
		&__grid {
			width: 80%;
			margin: auto;
			display: grid;
			grid-template-columns: 1fr 1fr;
			&--reverse {
				.splitted-section__text {
					order: 2;
					padding-right: 0;
					padding-left: $gutter-large;
				}
				.splitted-section__image {
					order: 1;
				}
			}
		}
		&__text {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: flex-start;
			gap: $gutter-large;
			padding: $gutter-large;
			padding-left: 0;
			background-color: $color-white;
		}
		&__image {
			position: relative;
			padding-top: 100%;
			img {
				position: absolute;
				top: 0;
				right: 0;
				bottom: 0;
				left: 0;
				width: 100%;
				height: 100%;
				display: block;
				object-fit: cover;
			}
			&--rounded {
				border-radius: 50%;
				overflow: hidden;
				max-height: 0;
				align-self: center;
			}
		}
		&__buttons {
			display: flex;
			justify-content: flex-start;
			gap: $gutter;
		}
		:global(.splitted-section__flower) {
			position: absolute;
			bottom: 0;
			right: 10%;
			transform: translateX(25%);
			width: 12%;
			height: auto;
			z-index: 1;
		}
		h2 {
			position: relative;
		}
		h2::after {
			content: '';
			position: absolute;
			display: block;
			width: 10rem;
			height: 1px;
			background-color: $color-main;
			right: -5rem;
		}
	}

	@media (max-width: $breakpoint) {
		.splitted-section {
			&__grid {
				grid-template-columns: 1fr;
				&--reverse .splitted-section__text {
					padding: 0;
					padding-top: $gutter;
				}
			}
			&--alt-color {
				.splitted-section__text {
					padding: $gutter;
				}
			}
			&__flower {
				width: 24%;
			}
			&__text {
				padding: $gutter 0;
			}
			h2::after {
				display: none;
			}
		}
	}
</style>
